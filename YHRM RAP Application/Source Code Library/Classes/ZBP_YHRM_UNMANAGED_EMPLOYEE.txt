* lhc_employee stands for Local Handler Class for Employee Entity
CLASS lhc_employee DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR employee RESULT result.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR employee RESULT result.

    METHODS create FOR MODIFY
      IMPORTING entities FOR CREATE employee.

    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE employee.

    METHODS update FOR MODIFY
      IMPORTING entities FOR UPDATE employee.

    METHODS delete FOR MODIFY
      IMPORTING keys FOR DELETE employee.

    METHODS read FOR READ
      IMPORTING keys FOR READ employee RESULT result.

    METHODS lock FOR LOCK
      IMPORTING keys FOR LOCK employee.

*    rba stands for Read by association
    METHODS rba_timesheet FOR READ
      IMPORTING keys_rba FOR READ employee\_timesheet FULL result_requested RESULT result LINK association_links.

*    cba stands for Create by association
    METHODS cba_timesheet FOR MODIFY
      IMPORTING entities_cba FOR CREATE employee\_timesheet.

    METHODS validate_fields FOR VALIDATE ON SAVE
      IMPORTING keys FOR employee~validate_fields.

    METHODS updateemployeename FOR DETERMINE ON MODIFY
      IMPORTING keys FOR employee~updateemployeename.
    METHODS updateemployeestatus FOR MODIFY
      IMPORTING keys FOR ACTION employee~updateemployeestatus RESULT result.

    METHODS earlynumbering_cba_timesheet FOR NUMBERING
      IMPORTING entities FOR CREATE employee\_timesheet.


ENDCLASS.

CLASS lhc_employee IMPLEMENTATION.

  METHOD get_instance_features.
  ENDMETHOD.

  METHOD get_instance_authorizations.
  ENDMETHOD.

  METHOD create.
    zcl_employee_api_class=>get_instance(  )->create_employee(
        EXPORTING
            entities = entities
        CHANGING
            mapped = mapped
            failed = failed
            reported = reported
    ).
  ENDMETHOD.

  METHOD earlynumbering_create.

    zcl_employee_api_class=>get_instance(  )->earlynumbering_create_employee(
        EXPORTING
            entities = entities
        CHANGING
            mapped = mapped
            failed = failed
            reported = reported
    ).

  ENDMETHOD.

  METHOD update.
    zcl_employee_api_class=>get_instance( )->update_employee(

        EXPORTING
            entities = entities
        CHANGING
            mapped = mapped
            failed = failed
            reported = reported
    ).

  ENDMETHOD.

  METHOD delete.

      zcl_employee_api_class=>get_instance( )->delete_employee(
        EXPORTING
            keys = keys
        CHANGING
            mapped = mapped
            failed = failed
            reported = reported
     ).

  ENDMETHOD.

  METHOD read.

    zcl_employee_api_class=>get_instance( )->read_employee(
        EXPORTING
            keys = keys
        CHANGING
            result = result
            failed = failed
            reported = reported
    ).

  ENDMETHOD.

  METHOD lock.

    Try.
        DATA(lock) = cl_abap_lock_object_factory=>get_instance( iv_name = 'EYHRM_U_LOCKEMP' ).

        catch cx_abap_lock_failure into DATA(exception).
        RAISE SHORTDUMP exception.

    ENDTRY.

    LOOP AT keys ASSIGNING FIELD-SYMBOL(<lfs_employee>).

        try.

            lock->enqueue(
                 it_parameter = VALUE #( ( name = 'EmpId' value = ref #( <lfs_employee>-EmpId ) ) )
             ).

            catch cx_abap_foreign_lock into DATA(foreign_lock).

                APPEND VALUE #(

                    EmpId = keys[ 1 ]-EmpId
                    %msg = new_message_With_text(
                        severity = if_abap_behv_message=>severity-error
                        text = 'Record is locked by :     ' && foreign_lock->user_name
                     )

                ) TO reported-employee.

                APPEND VALUE #(
                    EmpId = keys[ 1 ]-EmpId
                ) TO failed-employee.

            catch cx_abap_lock_failure into exception.
            RAISE SHORTDUMP exception.

        ENDTRY.

    ENDLOOP.



  ENDMETHOD.

  METHOD rba_timesheet.
  ENDMETHOD.

  METHOD cba_timesheet.
    zcl_employee_api_class=>get_instance( )->cba_timesheet(
        EXPORTING
            entities_cba = entities_cba
        CHANGING
            mapped = mapped
            failed = failed
            reported = reported
    ).

  ENDMETHOD.

  METHOD earlynumbering_cba_timesheet.

    zcl_employee_api_class=>get_instance( )->earlynumbering_cba_timesheet(
        EXPORTING
            entities = entities
        CHANGING
            mapped = mapped
            failed = failed
            reported = reported
    ).

  ENDMETHOD.

  METHOD validate_fields.

    READ ENTITIES OF yhrm_U_EMPLOYEE
    IN LOCAL MODE
    ENTITY employee
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(lt_employee_tmp)
    REPORTED DATA(lt_reported)
    FAILED DATA(lt_failed).

    IF NOT lt_employee_tmp[] is INITIAL.

        READ TABLE lt_employee_tmp ASSIGNING FIELD-SYMBOL(<lfs_employee_tmp>) index 1.
        if <lfs_employee_tmp> is ASSIGNED.

            reported-employee = VALUE #(
                ( %tky = <lfs_employee_tmp>-%tky %state_area = 'VALIDATE_FNM' )
                ( %tky = <lfs_employee_tmp>-%tky %state_area = 'VALIDATE_GENDER' )
                ( %tky = <lfs_employee_tmp>-%tky %state_area = 'VALIDATE_DOB' )
                ( %tky = <lfs_employee_tmp>-%tky %state_area = 'VALIDATE_EMAIL' )
                ).

            if <lfs_employee_tmp>-FirstName is INITIAL or
                <lfs_employee_tmp>-Email is INITIAL or
                <lfs_employee_tmp>-Dob is INITIAL or
                <lfs_employee_tmp>-Gender is INITIAL.

                failed-employee = VALUE #( ( %tky = <lfs_employee_tmp>-%tky ) ).


                IF <lfs_employee_tmp>-FirstName is INITIAL.

                    reported-employee = VALUE #( (
                        %tky = <lfs_employee_tmp>-%tky
                        %state_area = 'VALIDATE_FNM'
                        %element-firstname = if_abap_behv=>mk-on
                        %msg = new_message(
                            id = 'SY'
                            number = '002'
                            severity = if_abap_behv_message=>severity-error
                            v1 = 'FirstName is Required!'
                        )
                     ) ).
                ENDIF.

                IF <lfs_employee_tmp>-Gender is INITIAL.

                    reported-employee = VALUE #( BASE reported-employee (
                        %tky = <lfs_employee_tmp>-%tky
                        %state_area = 'VALIDATE_GENDER'
                        %element-gender = if_abap_behv=>mk-on
                        %msg = new_message(
                            id = 'SY'
                            number = '002'
                            severity = if_abap_behv_message=>severity-error
                            v1 = 'Gender is Required!'
                        )
                     ) ).
                ENDIF.

                IF <lfs_employee_tmp>-Dob is INITIAL.

                    reported-employee = VALUE #( BASE reported-employee (
                        %tky = <lfs_employee_tmp>-%tky
                        %state_area = 'VALIDATE_DOB'
                        %element-dob = if_abap_behv=>mk-on
                        %msg = new_message(
                            id = 'SY'
                            number = '002'
                            severity = if_abap_behv_message=>severity-error
                            v1 = 'Date of Birth is Required!'
                        )
                     ) ).
                ENDIF.

                IF <lfs_employee_tmp>-Email is INITIAL.

                    reported-employee = VALUE #( BASE reported-employee (
                        %tky = <lfs_employee_tmp>-%tky
                        %state_area = 'VALIDATE_EMAIL'
                        %element-email = if_abap_behv=>mk-on
                        %msg = new_message(
                            id = 'SY'
                            number = '002'
                            severity = if_abap_behv_message=>severity-error
                            v1 = 'Email is Required!'
                        )
                     ) ).
                ENDIF.

            ENDIF.

        ENDIF.


    ENDIF.

  ENDMETHOD.

    METHOD updateemployeename.
      READ ENTITIES OF yhrm_U_EMPLOYEE
      IN LOCAL MODE
      ENTITY employee
      FIELDS ( Gender ) WITH CORRESPONDING #( keys )
      RESULT DATA(lt_employee).

      LOOP at lt_employee ASSIGNING FIELD-SYMBOL(<lfs_employee>).

        DATA: lv_firstname TYPE string.

        lv_firstname = <lfs_employee>-FirstName.

        IF lv_firstname CP 'Mr.*' OR lv_firstname CP 'Mrs.*'.
          SPLIT lv_firstname AT ' ' INTO TABLE DATA(lt_name_parts).
          DELETE lt_name_parts INDEX 1.
          CONCATENATE LINES OF lt_name_parts INTO lv_firstname SEPARATED BY SPACE.
        ENDIF.

        IF <lfs_employee>-Gender EQ 'M'.
          MODIFY ENTITIES OF yhrm_U_EMPLOYEE
          IN LOCAL MODE
          ENTITY Employee
          UPDATE FIELDS ( FirstName )
          WITH VALUE #( (
            %tky = <lfs_employee>-%tky
            FirstName = |Mr. { lv_firstname }|
          ) ).

        ELSEIF <lfs_employee>-Gender = 'F'.
          MODIFY ENTITIES OF yhrm_U_EMPLOYEE
          IN LOCAL MODE
          ENTITY Employee
          UPDATE FIELDS ( FirstName )
          WITH VALUE #( (
            %tky = <lfs_employee>-%tky
            FirstName = |Mrs. { lv_firstname }|
          ) ).

        ENDIF.

      ENDLOOP.

    ENDMETHOD.



  METHOD updateEmployeeStatus.

    DATA(lt_keys) = keys.

    READ ENTITIES OF yhrm_U_EMPLOYEE
    IN LOCAL MODE
    ENTITY Employee
    FIELDS ( Active ) WITH CORRESPONDING #( keys )
    RESULT DATA(lt_employee_status).

    DATA(lv_new_status) = lt_keys[ 1 ]-%param-active.

    MODIFY ENTITIES OF yhrm_U_EMPLOYEE
    in LOCAL MODE
    ENTITY Employee
    UPDATE FIELDS ( Active )
    WITH VALUE #( (
        %tky = lt_employee_status[ 1 ]-%tky Active = lv_new_status
    ) ).

    READ ENTITIES OF yhrm_U_EMPLOYEE
    IN LOCAL MODE
    ENTITY Employee
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(lt_employee).

    result = VALUE #( FOR <lfs_employee> in lt_employee (
        %tky = <lfs_employee>-%tky
        %param = <lfs_employee>
     ) ).


  ENDMETHOD.

ENDCLASS.

CLASS lhc_timesheet DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS update FOR MODIFY
      IMPORTING entities FOR UPDATE timesheet.

    METHODS delete FOR MODIFY
      IMPORTING keys FOR DELETE timesheet.

    METHODS read FOR READ
      IMPORTING keys FOR READ timesheet RESULT result.

    METHODS rba_employee FOR READ
      IMPORTING keys_rba FOR READ timesheet\_employee FULL result_requested RESULT result LINK association_links.

    METHODS updatehours FOR DETERMINE ON MODIFY
      IMPORTING keys FOR timesheet~updatehours.

ENDCLASS.

CLASS lhc_timesheet IMPLEMENTATION.

  METHOD update.
  ENDMETHOD.

  METHOD delete.



  ENDMETHOD.

  METHOD read.


  ENDMETHOD.

  METHOD rba_employee.
  ENDMETHOD.

  METHOD updateHours.
    READ ENTITIES OF yhrm_U_EMPLOYEE
      IN LOCAL MODE
      ENTITY Timesheet
      FIELDS ( Available ) WITH CORRESPONDING #( keys )
      RESULT DATA(lt_timesheet).

      LOOP at lt_timesheet ASSIGNING FIELD-SYMBOL(<lfs_timesheet>).
        IF <lfs_timesheet>-Available EQ 'X'.
          MODIFY ENTITIES OF yhrm_U_EMPLOYEE
          IN LOCAL MODE
          ENTITY Timesheet
          UPDATE FIELDS ( Leavetype )
          WITH VALUE #( (
            %tky = <lfs_timesheet>-%tky
            Leavetype = ''
          ) ).

        ELSE.
          MODIFY ENTITIES OF yhrm_U_EMPLOYEE
          IN LOCAL MODE
          ENTITY Timesheet
          UPDATE FIELDS ( Workinghours OvertimeHrs )
          WITH VALUE #( (
            %tky = <lfs_timesheet>-%tky
            Workinghours = 0
            OvertimeHrs = 0
          ) ).
        ENDIF.

      ENDLOOP.

  ENDMETHOD.

ENDCLASS.

*  lsc stands for Local Saver Class
CLASS lsc_yhrm_u_employee DEFINITION INHERITING FROM cl_abap_behavior_saver.
  PROTECTED SECTION.

    METHODS finalize REDEFINITION.

    METHODS check_before_save REDEFINITION.

    METHODS save REDEFINITION.

    METHODS cleanup REDEFINITION.

    METHODS cleanup_finalize REDEFINITION.

ENDCLASS.

CLASS lsc_yhrm_u_employee IMPLEMENTATION.

  METHOD finalize.
  ENDMETHOD.

  METHOD check_before_save.
      DATA: gt_employee_tmp TYPE STANDARD TABLE OF yhrm_employee,
            gt_timesheet_tmp TYPE STANDARD TABLE OF yhrm_timesheet,
            lv_age TYPE i,
            lv_hire_date TYPE d,
            lv_dob TYPE d,
            lv_phone_no_string TYPE string.



      gt_employee_tmp = zcl_employee_api_class=>get_instance( )->gt_employee.
      gt_timesheet_tmp = zcl_employee_api_class=>get_instance( )->gt_timesheet.


      IF NOT gt_employee_tmp[] IS INITIAL.

        READ TABLE gt_employee_tmp ASSIGNING FIELD-SYMBOL(<lfs_employee_tmp>) INDEX 1.

        IF <lfs_employee_tmp> IS ASSIGNED.

          IF <lfs_employee_tmp>-dob IS NOT INITIAL.
            lv_age = trunc( ( sy-datum - <lfs_employee_tmp>-dob ) / 365 ).
            lv_hire_date = <lfs_employee_tmp>-dob + 16 * 365.
          ELSEIF <lfs_employee_tmp>-hire_date IS NOT INITIAL.
            lv_age = trunc( ( sy-datum - <lfs_employee_tmp>-hire_date ) / 365 ).
          ENDIF.

          IF lv_age < 16.
            APPEND VALUE #( empid = <lfs_employee_tmp>-emp_id
                            %msg = new_message_with_text(
                                severity = if_abap_behv_message=>severity-error
                                text = 'Employee age should be 16 or more.'
                                )
                         ) TO reported-employee.
          ENDIF.


              IF <lfs_employee_tmp>-hire_date IS NOT INITIAL and <lfs_employee_tmp>-hire_date <= lv_hire_date.
                APPEND VALUE #( empid = <lfs_employee_tmp>-emp_id
                                %msg = new_message_with_text(
                                    severity = if_abap_behv_message=>severity-error
                                    text = 'Hire date should be after 16 years from DOB.'
                                    )
                             ) TO reported-employee.
              ENDIF.

            IF <lfs_employee_tmp>-email IS NOT INITIAL AND <lfs_employee_tmp>-email CS '@. ' .
              APPEND VALUE #( empid = <lfs_employee_tmp>-emp_id ) to failed-employee.

              APPEND VALUE #( empid = <lfs_employee_tmp>-emp_id
                              %msg = new_message_with_text(
                                  severity = if_abap_behv_message=>severity-error
                                  text = 'Please enter a valid email address.'
                                  )
                           ) to reported-employee.
            ENDIF.

            IF <lfs_employee_tmp>-phone_no IS NOT INITIAL.

              SHIFT <lfs_employee_tmp>-phone_no LEFT DELETING LEADING '0'.

              lv_phone_no_string = <lfs_employee_tmp>-phone_no.

              IF strlen( lv_phone_no_string ) <> 10.

                APPEND VALUE #( empid = <lfs_employee_tmp>-emp_id ) to failed-employee.
                APPEND VALUE #( empid = <lfs_employee_tmp>-emp_id
                                %msg = new_message_with_text(
                                    severity = if_abap_behv_message=>severity-error
                                    text = 'Phone number should be exactly 10 digits.'
                                    )
                             ) to reported-employee.
              ENDIF.
            ENDIF.
        ENDIF.
      ENDIF.

      IF NOT gt_timesheet_tmp[] IS INITIAL.

        READ TABLE gt_timesheet_tmp ASSIGNING FIELD-SYMBOL(<lfs_timesheet_tmp>) INDEX 1.

        IF <lfs_timesheet_tmp> IS ASSIGNED.

          IF <lfs_timesheet_tmp>-ydate IS NOT INITIAL AND <lfs_timesheet_tmp>-ydate <= <lfs_employee_tmp>-hire_date.
              APPEND VALUE #( empid = <lfs_timesheet_tmp>-empid
                              %msg = new_message_with_text(
                                  severity = if_abap_behv_message=>severity-error
                                  text = 'Timesheet date should be after Hiredate.'
                                  )
                           ) TO reported-employee.
            ENDIF.

           IF <lfs_timesheet_tmp>-available IS NOT INITIAL AND NOT <lfs_timesheet_tmp>-leavetype IS INITIAL AND <lfs_timesheet_tmp>-overtime_hrs > 0.
              APPEND VALUE #( empid = <lfs_timesheet_tmp>-empid
                              %msg = new_message_with_text(
                                  severity = if_abap_behv_message=>severity-error
                                  text = 'If employee not available, Leave type should be mandatory, and overtime hours must be 0.'
                                  )
                           ) TO reported-employee.
            ENDIF.

           IF <lfs_timesheet_tmp>-workinghours IS NOT INITIAL AND <lfs_timesheet_tmp>-overtime_hrs IS NOT INITIAL.
                IF <lfs_timesheet_tmp>-workinghours > 8 OR <lfs_timesheet_tmp>-overtime_hrs > 6.
                     APPEND VALUE #( empid = <lfs_timesheet_tmp>-empid
                          %msg = new_message_with_text(
                              severity = if_abap_behv_message=>severity-error
                              text = 'Working hours should not exceed 8 and overtime hours should not exceed 6.'
                              )
                       ) TO reported-employee.
                ENDIF.
            ENDIF.
        ENDIF.
      ENDIF.


   ENDMETHOD.

  METHOD save.
    zcl_employee_api_class=>get_instance(  )->savedata(
        CHANGING
            reported = reported
    ).
  ENDMETHOD.

  METHOD cleanup.
  ENDMETHOD.

  METHOD cleanup_finalize.
  ENDMETHOD.

ENDCLASS.